#!/usr/bin/perl -w
use strict;
use CGI qw(:standard);
use XML::Simple qw(:strict);
use File::Temp qw/tempfile/;
#use LWP::UserAgent;
#use LWP::Protocol::http;
#use URI::http;
#use HTML::HeadParser;
#use HTTP::Message;
#use HTTP::Response;
#use HTTP::Request;

my $session     = time().rand();
#my $scratch_dir = "/opt/massgis/httpdjail/opt/massgis/wwwroot/temp/GeoServer_extract/$session";
my $scratch_dir = "/opt/massgis/wwwroot/temp/GeoServer_extract/$session";
my $web_dir     = "temp/GeoServer_extract/$session";
mkdir $scratch_dir;

# Get the POST data.
my $t;
read (STDIN,$t,$ENV{CONTENT_LENGTH});

my $httpmeth = "http";
my $authHeader = "";
if ($ENV{HTTPS} && $ENV{HTTPS} eq "on") {
    $httpmeth = "https";
    $authHeader = $ENV{"HTTP_AUTHORIZATION"};
    print STDERR "Authorization: ".$authHeader."\n\n";
    #$authHeader =~ s/\ /\\\ /;
}


# spin up the cgi
my $query = new CGI;

my $t2 = <<EOXML;
<layers>
  <layer name="foo" baseURL="http://somewhere">
    <metadata>http://metadata1/myfile.foo</metadata>
    <metadata>http://metadata2/myfile.bar</metadata>
  </layer>
  <layer name="mom" baseURL="http://somewhereelse">
    <metadata>http://metadata1/yourfile.foo</metadata>
    <metadata>http://metadata2/yourfile.bar</metadata>
  </layer>
</layers>
EOXML

# Bail if no data was passed as POST.
if (length($t) <= 0) {
  exit;
}

# Read data into XML object.
my $xml = XML::Simple->new();
my $doc = $xml->XMLin($t,forcearray => 1,KeyAttr => []);

print $query->header('text/plain');

my $cmd;
my @cmd_args;

foreach (@{$doc->{layer}}) {
  my %h = %{$_};
  # the urls in the following line should match the geoserver and metadata-webserver host names
  if (!(unsafeXML($h{baseURL}) =~ /^($httpmeth):\/\/(maps.massgis.state.ma.us|giswebservices.massgis.state.ma.us|170.63.93.152|170.63.98.114|wsgw.mass.gov)/)) {
    next;
  }
  #$h{baseURL} =~ s/^($httpmeth):\/\/maps.massgis.state.ma.us/http:\/\/127.0.0.1/;
  #$h{baseURL} =~ s/^($httpmeth):\/\/giswebservices.state.ma.us/http:\/\/170.63.98.114/;
  mkdir "$scratch_dir/".unsafeXML($h{name});
  my $r;

  if (unsafeXML($h{baseURL}) =~ /outputformat=(SHAPE-ZIP|excel2007|excel|csv)/) {
    my $format = $1;
    my ($wfsURL,$postBody) = split(/\?/,$h{baseURL},2);
    my ($request,$version,$outputformat,$service,$typename,$filter,$srsname) = split(/&/,unsafeXML($postBody));
    my @bits = split(/=/,$request,2);
    $request = $bits[1];
    @bits = split(/=/,$typename,2);
    $typename = $bits[1];
    @bits = split(/=/,$filter,2);
    $filter = $bits[1];
    @bits = split(/=/,$srsname,2);
    $srsname = $bits[1];

    my $postData = '<wfs:GetFeature service="WFS" version="1.1.0" xmlns:wfs="http://www.opengis.net/wfs" outputFormat="'.$format.'">'."\n";
    $postData .= '<wfs:Query typeName="'.$typename.'" srsName="'.$srsname.'">'."\n";
    $postData .= $filter."\n";
    $postData .= '</wfs:Query>'."\n";
    $postData .= '</wfs:GetFeature>'."\n";

    my ($fh,$filename) = tempfile(SUFFIX => '.xml');
    print $fh $postData;
    close $fh;

    my $req = "wget -q --post-file='".$filename."' '".$wfsURL."' -O \"$scratch_dir/".unsafeXML($h{name})."/file\" ".
              "--no-check-certificate --header=\"content-type: text/xml\"";
    if ($authHeader ne '') {
      $req = $req." --header='Authorization:".$authHeader."'";
    }
    #print $req."\n\n";
    @cmd_args = ("/bin/bash","-c",
      $req
    );

    $r = system(@cmd_args);
    unlink $filename;

    if ($r != 0) {
      print "error fetching zip file ".unsafeXML($h{baseURL})."\n\n";
      next;
    }

    if (unsafeXML($h{baseURL}) =~ /excel2007/) {
      rename("$scratch_dir/".unsafeXML($h{name})."/file","$scratch_dir/".unsafeXML($h{name})."/".unsafeXML($h{wmsLayer}).".xlsx");
    }
    elsif (unsafeXML($h{baseURL}) =~ /excel/) {
      rename("$scratch_dir/".unsafeXML($h{name})."/file","$scratch_dir/".unsafeXML($h{name})."/".unsafeXML($h{wmsLayer}).".xls");
    }
    elsif (unsafeXML($h{baseURL}) =~ /csv/) {
      rename("$scratch_dir/".unsafeXML($h{name})."/file","$scratch_dir/".unsafeXML($h{name})."/".unsafeXML($h{wmsLayer}).".csv");
    }
    else {
      rename("$scratch_dir/".unsafeXML($h{name})."/file","$scratch_dir/".unsafeXML($h{name})."/".unsafeXML($h{name}).".zip");
      $cmd = "cd '$scratch_dir/".unsafeXML($h{name})."'; /usr/bin/unzip '".unsafeXML($h{name}).".zip' > /dev/null ; rm '".$scratch_dir."/".unsafeXML($h{name})."/".unsafeXML($h{name}).".zip'";
      # print $cmd."\n\n";
      @cmd_args = ("/bin/bash","-c", $cmd);
      $r = system(@cmd_args);
    }
  }
  else
  {

    my $u = unsafeXML($h{baseURL});
    $u =~ s/styles=/styles=$h{wmsStyle}/;

    my $req = "wget -q '".$u."' -O \"$scratch_dir/".unsafeXML($h{name})."/file\" ".
              "--no-check-certificate --header=\"content-type: text/xml\"";
    if ($authHeader ne '') {
      $req = $req." --header='Authorization:".$authHeader."'";
    }
    #print $req."\n\n";
    @cmd_args = ("/bin/bash","-c",
      $req
    );

    $r = system(@cmd_args);
    if ($r != 0) {
      print "error fetching zip file ".$u."\n\n";
      next;
    }

    if ($u =~ /vnd.google-earth.kml\+xml/) {
      rename("$scratch_dir/".unsafeXML($h{name})."/file","$scratch_dir/".unsafeXML($h{name}).'/'.unsafeXML($h{wmsLayer}).'.kml');
    }
    else {
      rename("$scratch_dir/".unsafeXML($h{name})."/file","$scratch_dir/".unsafeXML($h{name}).'/'.unsafeXML($h{wmsLayer}).'.tif');
    }
  }

  foreach (@{$h{metadata}}) {
    my $u = unsafeXML($_);

    #if (!(unsafeXML($u) =~ /^http:\/\/(maps.massgis.state.ma.us|giswebservices.massgis.state.ma.us)/)) {
    if (!(unsafeXML($u) =~ /^http:\/\/(maps.massgis.state.ma.us|giswebservices.massgis.state.ma.us)/)) {
      next;
    }

    $u =~ s/^http:\/\/maps.massgis.state.ma.us/http:\/\/127.0.0.1/;
    $u =~ s/^http:\/\/giswebservices.state.ma.us/http:\/\/170.63.93.153/;

    my @p = split(/\//,$u);
    my @cmd_args = ("wget",
      $u,
      "-O","$scratch_dir/".unsafeXML($h{name})."/$p[$#p]",
      "-q","--no-check-certificate"
    );
    $r = system(@cmd_args);

    if ($r != 0) {
      warn "error fetching metadata file (return code $r) ".$u;
    }
  }
}

my $zipName = $doc->{zip}[0]{name};
$zipName =~ s/\.zip//gi;
chdir($scratch_dir);

@cmd_args = ("/bin/bash","-c", "cd $scratch_dir; /usr/bin/zip -r $zipName.zip * > /dev/null");
my $res = system(@cmd_args);
#my $cmd = "/bin/bash zip -r $zipName.zip *";
#my $res = `$cmd`;
#warn "zip file $scratch_dir/$zipName.zip created";


my $rmcmd = "cd $scratch_dir ; ls | egrep -v '(.zip|.xlsx|.xls|.csv)$' | tr \\\\n \\\\0 | xargs -0 rm -rf > /dev/null";
@cmd_args = ("/bin/bash","-c", $rmcmd);
$res = system(@cmd_args);


$cmd = "chmod 777 $scratch_dir > /dev/null; chmod 777 '$scratch_dir/$zipName.zip' > /dev/null";
@cmd_args = ("/bin/bash","-c", $cmd);
$res = system(@cmd_args);

print "$web_dir/$zipName.zip\n";

sub unsafeXML {
  my $s = pop;
  $s =~ s/___EQ___/=/g;
  $s =~ s/___AMP___/&/g;
  $s =~ s/___LT___/</g;
  $s =~ s/___GT___/>/g;
  $s =~ s/___QUOT___/"/g;
  return $s;
}
